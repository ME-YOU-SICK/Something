---
Read carefully before any task. These are the global rules for this project. Follow them strictly.

🔒 Project Structure Rules

Use the following project structure exactly:

/app
  / (root)
    page.tsx
  /auth
    login.tsx
    register.tsx
  /dashboard
    page.tsx
    profile.tsx
    events.tsx
    teams.tsx
    connections.tsx
    recruiters.tsx
    sponsors.tsx
    settings.tsx
  /events
    [id]/
      page.tsx
      announcements.tsx
/components
  ui/
  Layout.tsx
  Navbar.tsx
  Sidebar.tsx
  Card.tsx
  Form.tsx
/lib
  supabaseClient.ts
  utils.ts
/styles
  globals.css


Do not create new folders unless it’s a dynamic route ([id]).

Each route gets only 1 file (or 2 if absolutely needed).

UI components must go in /components. Never duplicate inside /app.

Logic helpers must go in /lib/utils.ts. Do not create new “services” or “helpers” folders.

One layout only → /components/Layout.tsx handles Navbar + Sidebar.

🧩 Code Style Rules

Keep logic complex, files few → prefer longer, well-organized files instead of splitting into 10 small ones.

Use functional React components with hooks. Do not create unnecessary abstractions.

Use Shadcn UI + TailwindCSS only. No extra UI libraries.

Maintain consistent imports — absolute paths if supported, relative otherwise.

Follow strict TypeScript (no any unless unavoidable).

Keep code self-contained inside its designated file.

🚫 Don’ts

❌ Don’t scaffold extra folders like services, context, hooks, models, etc.

❌ Don’t create 1 file per tiny function. Put related logic together.

❌ Don’t leave half-baked placeholders just to replace later. Implement complete features.

❌ Don’t ignore this structure — stick to it even if the logic grows complex.

✅ Do’s

✅ Keep project simple, strict, predictable.

✅ Optimize for clarity and fewer files over modularity.

✅ Build full features before moving to the next.

✅ Use the provided structure — never invent your own.

description: this rule is applicable when creating new files, or editing code.
alwaysApply: false
---
