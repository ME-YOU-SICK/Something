'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { 
  Users, 
  UserPlus, 
  Lightbulb, 
  Target, 
  Star, 
  MapPin, 
  CheckCircle,
  MessageSquare,
  Plus,
  Trash2
} from 'lucide-react'

interface TeamMember {
  id: number
  name: string
  role: string
  avatar: string
  location: string
  skills: string[]
  hackathonWins: number
  bio: string
  matchScore: number
  isSelected: boolean
}

interface TeamForm {
  maxTeamSize: string
  rolesWanted: string[]
  techStacksWanted: string[]
  projectIdea: string
  eventName: string
  deadline: string
}

export default function TeamifyPage() {
  const [userRole, setUserRole] = useState<'participant' | 'organizer'>('participant')
  const [teamForm, setTeamForm] = useState<TeamForm>({
    maxTeamSize: '4',
    rolesWanted: [],
    techStacksWanted: [],
    projectIdea: '',
    eventName: '',
    deadline: ''
  })

  const [suggestedTeam, setSuggestedTeam] = useState<TeamMember[]>([])
  const [selectedTeam, setSelectedTeam] = useState<TeamMember[]>([])
  const [isFormSubmitted, setIsFormSubmitted] = useState(false)
  const [autoGeneratedTeams, setAutoGeneratedTeams] = useState<TeamMember[][]>([])
  const [isTeamsGenerated, setIsTeamsGenerated] = useState(false)

  // Mock data for suggested team members
  const mockSuggestedMembers: TeamMember[] = [
    {
      id: 1,
      name: 'Alex Chen',
      role: 'Frontend Developer',
      avatar: '/avatar1.jpg',
      location: 'San Francisco, CA',
      skills: ['React', 'TypeScript', 'Next.js', 'Tailwind CSS'],
      hackathonWins: 5,
      bio: 'Passionate frontend developer with expertise in modern web technologies. Love building user-friendly interfaces.',
      matchScore: 95,
      isSelected: false
    },
    {
      id: 2,
      name: 'Sarah Rodriguez',
      role: 'Backend Developer',
      avatar: '/avatar2.jpg',
      location: 'Seattle, WA',
      skills: ['Node.js', 'Python', 'PostgreSQL', 'Docker'],
      hackathonWins: 7,
      bio: 'Backend developer specializing in scalable APIs and database design. Experienced in microservices architecture.',
      matchScore: 92,
      isSelected: false
    },
    {
      id: 3,
      name: 'Marcus Johnson',
      role: 'UI/UX Designer',
      avatar: '/avatar3.jpg',
      location: 'Austin, TX',
      skills: ['Figma', 'Adobe XD', 'Prototyping', 'User Research'],
      hackathonWins: 4,
      bio: 'Creative designer focused on user-centered design. Love turning complex problems into simple solutions.',
      matchScore: 88,
      isSelected: false
    },
    {
      id: 4,
      name: 'Emma Wilson',
      role: 'DevOps Engineer',
      avatar: '/avatar4.jpg',
      location: 'New York, NY',
      skills: ['AWS', 'Kubernetes', 'CI/CD', 'Monitoring'],
      hackathonWins: 6,
      bio: 'DevOps engineer passionate about automation and cloud infrastructure. Building scalable systems.',
      matchScore: 85,
      isSelected: false
    },
    {
      id: 5,
      name: 'David Kim',
      role: 'Full Stack Developer',
      avatar: '/avatar5.jpg',
      location: 'Los Angeles, CA',
      skills: ['React', 'Node.js', 'MongoDB', 'GraphQL'],
      hackathonWins: 8,
      bio: 'Full stack developer with a passion for clean code and scalable architectures.',
      matchScore: 90,
      isSelected: false
    },
    {
      id: 6,
      name: 'Lisa Zhang',
      role: 'Mobile Developer',
      avatar: '/avatar6.jpg',
      location: 'Portland, OR',
      skills: ['React Native', 'Swift', 'Kotlin', 'Flutter'],
      hackathonWins: 5,
      bio: 'Mobile developer creating beautiful cross-platform applications. iOS and Android specialist.',
      matchScore: 87,
      isSelected: false
    }
  ]

  // Additional participants for team generation (organizers)
  const additionalParticipants: TeamMember[] = [
    {
      id: 7,
      name: 'Priya Patel',
      role: 'AI/ML Engineer',
      avatar: '/avatar7.jpg',
      location: 'Seattle, WA',
      skills: ['Python', 'TensorFlow', 'PyTorch', 'Computer Vision'],
      hackathonWins: 8,
      bio: 'AI engineer specializing in deep learning and computer vision. Building the future of intelligent systems.',
      matchScore: 94,
      isSelected: false
    },
    {
      id: 8,
      name: 'Carlos Mendez',
      role: 'Cloud Architect',
      avatar: '/avatar8.jpg',
      location: 'Austin, TX',
      skills: ['AWS', 'Azure', 'GCP', 'Terraform', 'Kubernetes'],
      hackathonWins: 6,
      bio: 'Cloud architect designing scalable and resilient infrastructure solutions. Passionate about automation.',
      matchScore: 89,
      isSelected: false
    },
    {
      id: 9,
      name: 'Sophie Anderson',
      role: 'Game Developer',
      avatar: '/avatar9.jpg',
      location: 'Los Angeles, CA',
      skills: ['Unity', 'C#', 'Unreal Engine', '3D Modeling'],
      hackathonWins: 5,
      bio: 'Game developer creating immersive experiences. Specializing in indie games and VR applications.',
      matchScore: 86,
      isSelected: false
    },
    {
      id: 10,
      name: 'Ahmed Hassan',
      role: 'Blockchain Developer',
      avatar: '/avatar10.jpg',
      location: 'Miami, FL',
      skills: ['Solidity', 'Ethereum', 'Smart Contracts', 'Web3', 'DeFi'],
      hackathonWins: 4,
      bio: 'Blockchain developer building decentralized applications. Expert in DeFi protocols and smart contracts.',
      matchScore: 83,
      isSelected: false
    },
    {
      id: 11,
      name: 'Nina Kowalski',
      role: 'Data Engineer',
      avatar: '/avatar11.jpg',
      location: 'Denver, CO',
      skills: ['Apache Spark', 'Hadoop', 'Kafka', 'Python', 'SQL'],
      hackathonWins: 7,
      bio: 'Data engineer building robust data pipelines and infrastructure. Passionate about big data technologies.',
      matchScore: 91,
      isSelected: false
    },
    {
      id: 12,
      name: 'Kevin O\'Brien',
      role: 'Security Specialist',
      avatar: '/avatar12.jpg',
      location: 'Portland, OR',
      skills: ['Penetration Testing', 'Network Security', 'CISSP', 'Forensics'],
      hackathonWins: 9,
      bio: 'Security specialist protecting digital assets. Specializing in threat detection and prevention.',
      matchScore: 93,
      isSelected: false
    },
    {
      id: 13,
      name: 'Maria Garcia',
      role: 'Product Manager',
      avatar: '/avatar13.jpg',
      location: 'Chicago, IL',
      skills: ['Product Strategy', 'Agile', 'Analytics', 'User Research'],
      hackathonWins: 3,
      bio: 'Product manager focused on bringing innovative ideas to life. Bridge between tech and business.',
      matchScore: 82,
      isSelected: false
    },
    {
      id: 14,
      name: 'James Park',
      role: 'Backend Developer',
      avatar: '/avatar14.jpg',
      location: 'Boston, MA',
      skills: ['Python', 'Django', 'PostgreSQL', 'Redis'],
      hackathonWins: 6,
      bio: 'Backend developer specializing in high-performance APIs and database optimization.',
      matchScore: 88,
      isSelected: false
    },
    {
      id: 15,
      name: 'Ryan Johnson',
      role: 'Full Stack Developer',
      avatar: '/avatar15.jpg',
      location: 'Washington, DC',
      skills: ['React', 'Node.js', 'MongoDB', 'GraphQL'],
      hackathonWins: 7,
      bio: 'Full stack developer with a passion for clean code and scalable architectures.',
      matchScore: 89,
      isSelected: false
    }
  ]

  // All participants for team generation
  const allParticipants = [...mockSuggestedMembers, ...additionalParticipants]

  // Detect user role on component mount
  useEffect(() => {
    const storedRole = localStorage.getItem('userRole')
    if (storedRole === 'organizer') {
      setUserRole('organizer')
    }
  }, [])

  const availableRoles = [
    'Frontend Developer',
    'Backend Developer',
    'Full-Stack Developer',
    'Mobile Developer',
    'Web Developer',
    'Data Scientist',
    'Machine Learning Engineer',
    'Deep Learning Engineer',
    'AI/Prompt Engineer',
    'NLP Engineer',
    'Computer Vision Engineer',
    'Hardware Hacker',
    'IoT Developer',
    'Robotics Developer',
    'Cloud Engineer',
    'DevOps Engineer',
    'Systems Architect',
    'Database Engineer',
    'Security Specialist',
    'Ethical Hacker',
    'Tester',
    'QA Specialist',
    'UI Designer',
    'UX Designer',
    'Graphic Designer',
    'Game Developer',
    'AR/VR Developer',
    'Blockchain Developer',
    'Smart Contract Developer',
    'Embedded Systems Developer',
    'Researcher',
    'Domain Expert',
    'Business Analyst',
    'Product Manager',
    'Team Lead',
    'Pitcher',
    'Storyteller',
    'Growth Hacker',
    'Marketing Specialist',
    'Content Creator',
    'Technical Writer',
    'Data Engineer',
    'Data Analyst'
  ]

  const techStacks = {
    'üåê Frontend': [
      'HTML', 'CSS', 'JavaScript', 'React', 'Vue.js', 'Angular', 'Svelte',
      'Next.js', 'Nuxt.js', 'Remix', 'Bootstrap', 'Tailwind CSS', 'Material UI', 'Chakra UI'
    ],
    '‚öôÔ∏è Backend': [
      'Node.js', 'Express.js', 'NestJS', 'Django', 'Flask', 'FastAPI',
      'Ruby on Rails', 'Laravel', 'CodeIgniter', 'Spring Boot', 'ASP.NET Core'
    ],
    'üñ•Ô∏è Full-Stack': [
      'MERN', 'MEAN', 'PERN', 'JAMstack', 'LAMP', 'WAMP', 'XAMPP'
    ],
    'üì± Mobile': [
      'Swift', 'Kotlin', 'Java (Android)', 'React Native', 'Flutter',
      'Xamarin', 'Ionic', 'NativeScript'
    ],
    'ü§ñ AI / ML / Data Science': [
      'NumPy', 'Pandas', 'Scikit-learn', 'TensorFlow', 'PyTorch', 'Keras',
      'OpenCV', 'Hugging Face', 'LangChain', 'LlamaIndex', 'Haystack',
      'JAX', 'MXNet', 'Theano', 'R', 'Julia', 'MATLAB', 'MLflow', 'Weights & Biases'
    ],
    'üóÑÔ∏è Databases': [
      'MySQL', 'PostgreSQL', 'SQLite', 'Oracle DB', 'MS SQL Server',
      'MongoDB', 'Cassandra', 'CouchDB', 'DynamoDB', 'CockroachDB',
      'FaunaDB', 'YugabyteDB', 'Neo4j', 'ArangoDB', 'Dgraph', 'InfluxDB', 'TimescaleDB'
    ],
    '‚òÅÔ∏è Cloud & DevOps': [
      'AWS', 'GCP', 'Azure', 'DigitalOcean', 'Vercel', 'Netlify',
      'Heroku', 'Docker', 'Kubernetes', 'OpenShift', 'Jenkins',
      'GitHub Actions', 'GitLab CI', 'CircleCI', 'Terraform', 'Ansible', 'Pulumi'
    ],
    'üîê Security & Blockchain': [
      'Metasploit', 'Burp Suite', 'OWASP ZAP', 'Ethereum', 'Solidity',
      'Hardhat', 'Truffle', 'Ganache', 'Solana', 'Polygon', 'Avalanche',
      'Hyperledger', 'IPFS', 'The Graph', 'Alchemy', 'Moralis'
    ],
    'üéÆ Game / AR / VR': [
      'Unity', 'Unreal Engine', 'Godot', 'ARKit', 'ARCore', 'Vuforia',
      'Three.js', 'Babylon.js'
    ],
    'üõ†Ô∏è Miscellaneous / Other': [
      'Arduino', 'Raspberry Pi', 'ESP32', 'Particle', 'REST', 'GraphQL',
      'gRPC', 'Kafka', 'RabbitMQ', 'MQTT', 'WordPress', 'Strapi',
      'Ghost', 'Contentful', 'Bubble', 'Glide', 'Webflow', 'Airtable', 'Zapier'
    ]
  }

  const handleInputChange = (field: keyof TeamForm, value: string | string[]) => {
    setTeamForm(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleRoleToggle = (role: string) => {
    setTeamForm(prev => ({
      ...prev,
      rolesWanted: prev.rolesWanted.includes(role)
        ? prev.rolesWanted.filter(r => r !== role)
        : [...prev.rolesWanted, role]
    }))
  }

  const handleTechStackToggle = (techStack: string) => {
    setTeamForm(prev => ({
      ...prev,
      techStacksWanted: prev.techStacksWanted.includes(techStack)
        ? prev.techStacksWanted.filter(t => t !== techStack)
        : [...prev.techStacksWanted, techStack]
    }))
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!teamForm.projectIdea.trim() || teamForm.rolesWanted.length === 0) {
      alert('Please fill in all required fields: Project idea and at least one role wanted.')
      return
    }

    // Filter suggested members based on roles wanted
    const filteredMembers = mockSuggestedMembers.filter(member =>
      teamForm.rolesWanted.includes(member.role)
    ).slice(0, parseInt(teamForm.maxTeamSize))

    setSuggestedTeam(filteredMembers)
    setIsFormSubmitted(true)
    
    console.log('Team requirements submitted:', teamForm)
    console.log('Suggested team:', filteredMembers)
  }

  const handleSelectMember = (member: TeamMember) => {
    if (selectedTeam.length >= parseInt(teamForm.maxTeamSize)) {
      alert(`Team size limit reached (${teamForm.maxTeamSize} members)`)
      return
    }

    setSelectedTeam(prev => [...prev, member])
    setSuggestedTeam(prev => prev.map(m => 
      m.id === member.id ? { ...m, isSelected: true } : m
    ))
  }

  const handleRemoveMember = (memberId: number) => {
    setSelectedTeam(prev => prev.filter(m => m.id !== memberId))
    setSuggestedTeam(prev => prev.map(m => 
      m.id === memberId ? { ...m, isSelected: false } : m
    ))
  }

  const handleInviteTeam = () => {
    if (selectedTeam.length === 0) {
      alert('Please select at least one team member')
      return
    }

    alert(`Inviting ${selectedTeam.length} team members to collaborate on "${teamForm.projectIdea}"!`)
    console.log('Team invitation sent:', selectedTeam)
  }

  const handleAutoGenerateTeams = () => {
    const teamSize = parseInt(teamForm.maxTeamSize)
    const totalParticipants = allParticipants.length
    const numTeams = Math.floor(totalParticipants / teamSize)
    
    if (totalParticipants < teamSize) {
      alert(`Not enough participants (${totalParticipants}) for team size ${teamSize}`)
      return
    }

    // Create balanced teams based on roles and experience
    const teams: TeamMember[][] = []
    const shuffledParticipants = [...allParticipants].sort(() => Math.random() - 0.5)
    
    for (let i = 0; i < numTeams; i++) {
      const team: TeamMember[] = []
      const startIndex = i * teamSize
      
      for (let j = 0; j < teamSize; j++) {
        const participantIndex = startIndex + j
        if (participantIndex < shuffledParticipants.length) {
          team.push({ ...shuffledParticipants[participantIndex] })
        }
      }
      
      if (team.length > 0) {
        teams.push(team)
      }
    }

    // Handle remaining participants
    const remainingParticipants = shuffledParticipants.slice(numTeams * teamSize)
    if (remainingParticipants.length >= teamSize) {
      const finalTeam = remainingParticipants.slice(0, teamSize)
      teams.push(finalTeam)
    } else if (remainingParticipants.length > 0) {
      // Distribute remaining participants to existing teams
      remainingParticipants.forEach((participant, index) => {
        const teamIndex = index % teams.length
        teams[teamIndex].push({ ...participant })
      })
    }

    setAutoGeneratedTeams(teams)
    setIsTeamsGenerated(true)
    
    console.log('Auto-generated teams:', teams)
    alert(`Generated ${teams.length} balanced teams!`)
  }

  const resetForm = () => {
    setTeamForm({
      maxTeamSize: '4',
      rolesWanted: [],
      techStacksWanted: [],
      projectIdea: '',
      eventName: '',
      deadline: ''
    })
    setSuggestedTeam([])
    setSelectedTeam([])
    setIsFormSubmitted(false)
    setAutoGeneratedTeams([])
    setIsTeamsGenerated(false)
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Teamify</h1>
        <p className="text-gray-600 text-lg">
          Build your dream team for the next hackathon. Find teammates with complementary skills and bring your project idea to life!
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Team Requirements Form */}
        <div>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Target className="h-5 w-5 mr-2" />
                Team Requirements
              </CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Event Name */}
                <div className="space-y-2">
                  <Label htmlFor="eventName">Hackathon Event</Label>
                  <Input
                    id="eventName"
                    placeholder="e.g., TechCrunch Disrupt 2024"
                    value={teamForm.eventName}
                    onChange={(e) => handleInputChange('eventName', e.target.value)}
                  />
                </div>

                {/* Max Team Size */}
                <div className="space-y-2">
                  <Label htmlFor="maxTeamSize">Maximum Team Size</Label>
                  <Select value={teamForm.maxTeamSize} onValueChange={(value) => handleInputChange('maxTeamSize', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select team size" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="2">2 members</SelectItem>
                      <SelectItem value="3">3 members</SelectItem>
                      <SelectItem value="4">4 members</SelectItem>
                      <SelectItem value="5">5 members</SelectItem>
                      <SelectItem value="6">6 members</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Roles Wanted */}
                <div className="space-y-2">
                  <Label>Roles Wanted</Label>
                  <div className="flex flex-wrap gap-2 max-h-32 overflow-y-auto">
                    {availableRoles.map((role) => (
                      <Badge
                        key={role}
                        variant={teamForm.rolesWanted.includes(role) ? 'default' : 'outline'}
                        className={`cursor-pointer hover:bg-blue-50 ${
                          teamForm.rolesWanted.includes(role) ? 'bg-blue-600 text-white' : ''
                        }`}
                        onClick={() => handleRoleToggle(role)}
                      >
                        {role}
                      </Badge>
                    ))}
                  </div>
                  <p className="text-sm text-gray-500">
                    Selected: {teamForm.rolesWanted.length} role(s)
                  </p>
                </div>

                {/* Tech Stacks Wanted */}
                <div className="space-y-2">
                  <Label>Tech Stacks Wanted</Label>
                  <div className="space-y-3">
                    {Object.entries(techStacks).map(([category, stacks]) => (
                      <div key={category} className="space-y-2">
                        <h4 className="text-sm font-medium text-gray-700">{category}</h4>
                        <div className="flex flex-wrap gap-2 max-h-24 overflow-y-auto">
                          {stacks.map((tech) => (
                            <Badge
                              key={tech}
                              variant={teamForm.techStacksWanted.includes(tech) ? 'default' : 'outline'}
                              className={`cursor-pointer hover:bg-blue-50 text-xs ${
                                teamForm.techStacksWanted.includes(tech) ? 'bg-blue-600 text-white' : ''
                              }`}
                              onClick={() => handleTechStackToggle(tech)}
                            >
                              {tech}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                  <p className="text-sm text-gray-500">
                    Selected: {teamForm.techStacksWanted.length} tech stack(s)
                  </p>
                </div>

                {/* Project Idea */}
                <div className="space-y-2">
                  <Label htmlFor="projectIdea">Project Idea *</Label>
                  <Textarea
                    id="projectIdea"
                    placeholder="Describe your project idea, goals, and what you want to build..."
                    value={teamForm.projectIdea}
                    onChange={(e) => handleInputChange('projectIdea', e.target.value)}
                    rows={4}
                    required
                  />
                </div>

                {/* Deadline */}
                <div className="space-y-2">
                  <Label htmlFor="deadline">Project Deadline</Label>
                  <Input
                    id="deadline"
                    type="date"
                    value={teamForm.deadline}
                    onChange={(e) => handleInputChange('deadline', e.target.value)}
                  />
                </div>

                {/* Submit Button */}
                <Button type="submit" className="w-full" size="lg">
                  <Lightbulb className="h-4 w-4 mr-2" />
                  Find Team Members
                </Button>

                {/* Auto-generate Teams Button (Organizers only) */}
                {userRole === 'organizer' && (
                  <Button 
                    type="button" 
                    variant="outline" 
                    className="w-full" 
                    size="lg"
                    onClick={handleAutoGenerateTeams}
                  >
                    <Users className="h-4 w-4 mr-2" />
                    Auto-generate Teams
                  </Button>
                )}
              </form>
            </CardContent>
          </Card>
        </div>

        {/* Results Section */}
        <div className="space-y-6">
          {isFormSubmitted && (
            <>
              {/* Selected Team */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <span className="flex items-center">
                      <Users className="h-5 w-5 mr-2" />
                      Your Team ({selectedTeam.length}/{teamForm.maxTeamSize})
                    </span>
                    {selectedTeam.length > 0 && (
                      <Button onClick={handleInviteTeam} size="sm">
                        <MessageSquare className="h-4 w-4 mr-2" />
                        Invite Team
                      </Button>
                    )}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {selectedTeam.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      <Users className="h-12 w-12 mx-auto mb-2 text-gray-300" />
                      <p>No team members selected yet</p>
                      <p className="text-sm">Click on suggested members below to add them to your team</p>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {selectedTeam.map((member) => (
                        <div key={member.id} className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                          <div className="flex items-center space-x-3">
                            <Avatar className="h-10 w-10">
                              <AvatarImage src={member.avatar} alt={member.name} />
                              <AvatarFallback>
                                {member.name.split(' ').map(n => n[0]).join('')}
                              </AvatarFallback>
                            </Avatar>
                            <div>
                              <p className="font-medium">{member.name}</p>
                              <p className="text-sm text-gray-600">{member.role}</p>
                            </div>
                          </div>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleRemoveMember(member.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Suggested Team Members */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <UserPlus className="h-5 w-5 mr-2" />
                    Suggested Team Members
                  </CardTitle>
                  <p className="text-sm text-gray-600">
                    Based on your requirements: {teamForm.rolesWanted.join(', ')}
                    {teamForm.techStacksWanted.length > 0 && (
                      <span> ‚Ä¢ Tech: {teamForm.techStacksWanted.slice(0, 3).join(', ')}
                        {teamForm.techStacksWanted.length > 3 && ` +${teamForm.techStacksWanted.length - 3} more`}
                      </span>
                    )}
                  </p>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {suggestedTeam.map((member) => (
                      <div key={member.id} className={`p-4 border rounded-lg ${
                        member.isSelected ? 'border-green-300 bg-green-50' : 'border-gray-200 hover:border-blue-300'
                      }`}>
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-3">
                            <Avatar className="h-12 w-12">
                              <AvatarImage src={member.avatar} alt={member.name} />
                              <AvatarFallback>
                                {member.name.split(' ').map(n => n[0]).join('')}
                              </AvatarFallback>
                            </Avatar>
                            <div className="flex-1">
                              <div className="flex items-center space-x-2 mb-1">
                                <h3 className="font-semibold">{member.name}</h3>
                                <Badge variant="outline" className="text-xs">
                                  {member.role}
                                </Badge>
                                <Badge variant="secondary" className="text-xs">
                                  {member.matchScore}% match
                                </Badge>
                              </div>
                              <p className="text-sm text-gray-600 mb-2">{member.bio}</p>
                              
                              <div className="flex items-center text-sm text-gray-500 space-x-4 mb-2">
                                <div className="flex items-center">
                                  <MapPin className="h-4 w-4 mr-1" />
                                  <span>{member.location}</span>
                                </div>
                                <div className="flex items-center">
                                  <Star className="h-4 w-4 mr-1" />
                                  <span>{member.hackathonWins} wins</span>
                                </div>
                              </div>
                              
                              <div className="flex flex-wrap gap-1">
                                {member.skills.slice(0, 3).map((skill) => (
                                  <Badge key={skill} variant="outline" className="text-xs">
                                    {skill}
                                  </Badge>
                                ))}
                                {member.skills.length > 3 && (
                                  <Badge variant="outline" className="text-xs">
                                    +{member.skills.length - 3}
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex flex-col space-y-2">
                            {member.isSelected ? (
                              <div className="flex items-center text-green-600 text-sm">
                                <CheckCircle className="h-4 w-4 mr-1" />
                                Selected
                              </div>
                            ) : (
                              <Button
                                size="sm"
                                onClick={() => handleSelectMember(member)}
                                disabled={selectedTeam.length >= parseInt(teamForm.maxTeamSize)}
                              >
                                <Plus className="h-4 w-4 mr-2" />
                                Add to Team
                              </Button>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Auto-generated Teams (Organizers only) */}
              {userRole === 'organizer' && isTeamsGenerated && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <Users className="h-5 w-5 mr-2" />
                      Auto-generated Teams ({autoGeneratedTeams.length} teams)
                    </CardTitle>
                    <p className="text-sm text-gray-600">
                      Balanced teams created automatically for optimal collaboration
                    </p>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {autoGeneratedTeams.map((team, teamIndex) => (
                        <div key={teamIndex} className="border rounded-lg p-4 bg-blue-50">
                          <div className="flex items-center justify-between mb-3">
                            <h4 className="font-semibold text-lg">Team {teamIndex + 1}</h4>
                            <Badge variant="outline">
                              {team.length} members
                            </Badge>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                            {team.map((member) => (
                              <div key={member.id} className="flex items-center space-x-3 p-3 bg-white rounded-lg border">
                                <Avatar className="h-10 w-10">
                                  <AvatarImage src={member.avatar} alt={member.name} />
                                  <AvatarFallback>
                                    {member.name.split(' ').map(n => n[0]).join('')}
                                  </AvatarFallback>
                                </Avatar>
                                <div className="flex-1 min-w-0">
                                  <p className="font-medium text-sm truncate">{member.name}</p>
                                  <p className="text-xs text-gray-600 truncate">{member.role}</p>
                                  <div className="flex items-center text-xs text-gray-500 mt-1">
                                    <Star className="h-3 w-3 mr-1" />
                                    <span>{member.hackathonWins} wins</span>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                          
                          <div className="mt-3 flex justify-between items-center">
                            <div className="text-sm text-gray-600">
                              <span className="font-medium">Team Balance:</span> 
                              {team.map(m => m.role).join(' ‚Ä¢ ')}
                            </div>
                            <Button size="sm" variant="outline">
                              <MessageSquare className="h-4 w-4 mr-2" />
                              Notify Team
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Reset Button */}
              <div className="text-center">
                <Button variant="outline" onClick={resetForm}>
                  Start Over
                </Button>
              </div>
            </>
          )}

          {/* Initial State */}
          {!isFormSubmitted && (
            <Card>
              <CardContent className="text-center py-12">
                <Lightbulb className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Ready to Build Your Team?</h3>
                <p className="text-gray-600">
                  Fill out the form on the left to find teammates with the skills you need for your project.
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  )
}
